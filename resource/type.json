{
    "$schema": "https://raw.githubusercontent.com/wraith13/evil-type.ts/master/generated/schema/type.json#",
    "comment": [
        "This file is generated."
    ],
    "imports": [
        {
            "import": "{ EvilType }",
            "from": "../../common/evil-type"
        },
        {
            "import": "{ Jsonable }",
            "from": "./jsonable"
        }
    ],
    "defines": {
        "export": {
            "type": "code",
            "export": true,
            "tokens": [
                "{",
                "EvilType",
                ",",
                "Jsonable",
                "}"
            ]
        },
        "Type": {
            "type": "namespace",
            "members": {
                "schema": {
                    "type": "value",
                    "value": {
                        "const": "https://raw.githubusercontent.com/wraith13/evil-type.ts/master/generated/schema/type.json#"
                    }
                },
                "CommentProperty": {
                    "type": "interface",
                    "members": {
                        "comment?": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "[TypeScript]"
                        }
                    }
                },
                "CommonProperties": {
                    "type": "interface",
                    "members": {
                        "default?": {
                            "$ref": "Jsonable.Jsonable",
                            "description": "[JSON Schema]"
                        },
                        "title?": {
                            "type": "string",
                            "description": "[JSON Schema]"
                        },
                        "description?": {
                            "type": "string",
                            "description": "[JSON Schema]"
                        }
                    }
                },
                "TypeSchema": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommentProperty"
                        }
                    ],
                    "members": {
                        "$schema": {
                            "type": "typeof",
                            "value": {
                                "$ref": "schema"
                            }
                        },
                        "imports?": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "$ref": "ImportDefinition"
                            },
                            "description": "[TypeScript] Specify imports that your code depends on. If you use `full` for `validatorOption`, you need to specify import as `evil-type` as `{ EvilType }` here."
                        },
                        "defines": {
                            "$ref": "DefinitionMap",
                            "description": "Your type definitions"
                        },
                        "options": {
                            "$ref": "OutputOptions"
                        }
                    }
                },
                "OutputOptions": {
                    "type": "interface",
                    "members": {
                        "outputFile": {
                            "type": "string",
                            "description": "[TypeScript]"
                        },
                        "indentUnit": {
                            "type": "enum-type",
                            "members": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                "tab"
                            ],
                            "default": 4,
                            "description": "[TypeScript]"
                        },
                        "indentStyle": {
                            "$ref": "IndentStyleType",
                            "default": "allman",
                            "description": "[TypeScript]"
                        },
                        "validatorOption": {
                            "$ref": "ValidatorOptionType",
                            "default": "simple",
                            "description": "[TypeScript]"
                        },
                        "safeNumber?": {
                            "type": "boolean",
                            "default": false,
                            "description": "[TypeScript]"
                        },
                        "safeInteger?": {
                            "type": "boolean",
                            "default": false,
                            "description": "[TypeScript]"
                        },
                        "maxLineLength?": {
                            "type": "or",
                            "types": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "integer"
                                }
                            ],
                            "default": 160,
                            "description": "[TypeScript]"
                        },
                        "StringFormatMap?": {
                            "type": "dictionary",
                            "keyin": {
                                "type": "keyof",
                                "value": {
                                    "type": "typeof",
                                    "value": {
                                        "$ref": "StringFormatMap"
                                    }
                                }
                            },
                            "optionality": "partial",
                            "valueType": {
                                "$ref": "StringFormatEntry"
                            },
                            "additionalProperties": false
                        },
                        "default?": {
                            "type": "interface",
                            "members": {
                                "export?": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "[TypeScript]"
                                },
                                "target?": {
                                    "$ref": "DefinitionTarget"
                                },
                                "additionalProperties?": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "safeInteger?": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "safeNumber?": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "regexpFlags?": {
                                    "type": "string",
                                    "default": "u",
                                    "description": "[TypeScript]"
                                },
                                "regexpTest?": {
                                    "type": "string",
                                    "description": "[TypeScript] Custom RegExp Test Function like (pattern: string, flags: string, text: string): boolean => new RegExp(pattern, flags).test(text)"
                                }
                            }
                        },
                        "schema?": {
                            "$ref": "SchemaOptions",
                            "description": "[JSON Schema] If you want to generate JSON Schema, specify this option."
                        }
                    }
                },
                "SchemaOptions": {
                    "type": "interface",
                    "members": {
                        "outputFile": {
                            "type": "string",
                            "description": "[JSON Schema]"
                        },
                        "$id?": {
                            "type": "string",
                            "description": "[JSON Schema] Schema ID"
                        },
                        "$ref?": {
                            "type": "string",
                            "description": "[JSON Schema] Root Schema"
                        },
                        "externalReferMapping?": {
                            "type": "dictionary",
                            "valueType": {
                                "type": "string"
                            },
                            "description": "[JSON Schema] Mapping of external schemas to reference"
                        }
                    }
                },
                "indentStyleTypeMember": {
                    "type": "value",
                    "value": {
                        "const": [
                            "allman",
                            "egyptian"
                        ]
                    },
                    "validator": false
                },
                "IndentStyleType": {
                    "type": "type",
                    "define": {
                        "type": "itemof",
                        "value": {
                            "$ref": "indentStyleTypeMember"
                        }
                    }
                },
                "ValidatorOptionType": {
                    "type": "type",
                    "define": {
                        "type": "enum-type",
                        "members": [
                            "none",
                            "simple",
                            "full"
                        ]
                    }
                },
                "AlphaElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "type": "string"
                        }
                    }
                },
                "TypeScriptDefinitionTarget": {
                    "type": "interface",
                    "members": {
                        "definition?": {
                            "type": "boolean",
                            "default": true
                        },
                        "validator?": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                },
                "DefinitionTarget": {
                    "type": "interface",
                    "members": {
                        "typescript?": {
                            "type": "or",
                            "types": [
                                {
                                    "$ref": "TypeScriptDefinitionTarget"
                                },
                                {
                                    "type": "boolean",
                                    "default": true
                                }
                            ]
                        },
                        "json_schema?": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                },
                "AlphaDefinition": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaElement"
                        },
                        {
                            "$ref": "CommentProperty"
                        }
                    ],
                    "members": {
                        "export?": {
                            "type": "boolean"
                        },
                        "target?": {
                            "$ref": "DefinitionTarget"
                        }
                    }
                },
                "ImportDefinition": {
                    "type": "interface",
                    "members": {
                        "import": {
                            "type": "string"
                        },
                        "from": {
                            "type": "string"
                        }
                    }
                },
                "Definition": {
                    "type": "type",
                    "define": {
                        "type": "or",
                        "types": [
                            {
                                "$ref": "CodeDefinition"
                            },
                            {
                                "$ref": "NamespaceDefinition"
                            },
                            {
                                "$ref": "ValueDefinition"
                            },
                            {
                                "$ref": "TypeDefinition"
                            },
                            {
                                "$ref": "InterfaceDefinition"
                            },
                            {
                                "$ref": "DictionaryDefinition"
                            }
                        ]
                    }
                },
                "DefinitionMap": {
                    "type": "dictionary",
                    "valueType": {
                        "$ref": "Definition"
                    }
                },
                "CodeDefinition": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaDefinition"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "code"
                        },
                        "tokens": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "description": "[TypeScript]"
                },
                "NamespaceDefinition": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaDefinition"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "namespace"
                        },
                        "members": {
                            "$ref": "DefinitionMap"
                        }
                    }
                },
                "ValueDefinition": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaDefinition"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "value"
                        },
                        "value": {
                            "type": "or",
                            "types": [
                                {
                                    "$ref": "LiteralElement"
                                },
                                {
                                    "$ref": "ReferElement"
                                }
                            ]
                        }
                    }
                },
                "TypeDefinition": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaDefinition"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "type"
                        },
                        "define": {
                            "$ref": "TypeOrRefer"
                        }
                    }
                },
                "InterfaceDefinition": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaDefinition"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "interface"
                        },
                        "extends?": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "$ref": "ReferElement"
                            }
                        },
                        "members": {
                            "type": "dictionary",
                            "valueType": {
                                "$ref": "TypeOrRefer"
                            }
                        },
                        "additionalProperties?": {
                            "type": "boolean"
                        }
                    }
                },
                "DictionaryDefinition": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaDefinition"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "dictionary"
                        },
                        "keyin?": {
                            "$ref": "TypeOrRefer"
                        },
                        "optionality?": {
                            "type": "enum-type",
                            "members": [
                                "as-is",
                                "partial",
                                "required"
                            ]
                        },
                        "valueType": {
                            "$ref": "TypeOrRefer"
                        },
                        "additionalProperties?": {
                            "type": "boolean"
                        }
                    }
                },
                "ArrayElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaElement"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "array"
                        },
                        "items": {
                            "$ref": "TypeOrRefer"
                        },
                        "minItems?": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "maxItems?": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "uniqueItems?": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                },
                "OrElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaElement"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "or"
                        },
                        "types": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "$ref": "TypeOrRefer"
                            }
                        }
                    }
                },
                "AndElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "AlphaElement"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "and"
                        },
                        "types": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "$ref": "TypeOrRefer"
                            }
                        }
                    }
                },
                "LiteralElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "const": {
                            "$ref": "Jsonable.Jsonable"
                        }
                    }
                },
                "ReferElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "$ref": {
                            "type": "string"
                        }
                    }
                },
                "NeverType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "never"
                        }
                    }
                },
                "AnyType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "any"
                        }
                    }
                },
                "UnknownType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "unknown"
                        }
                    }
                },
                "NullType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "null"
                        }
                    }
                },
                "BooleanType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "boolean"
                        },
                        "default?": {
                            "type": "boolean",
                            "description": "[JSON Schema]"
                        }
                    }
                },
                "IntegerType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "integer"
                        },
                        "minimum?": {
                            "type": "integer"
                        },
                        "exclusiveMinimum?": {
                            "type": "integer"
                        },
                        "maximum?": {
                            "type": "integer"
                        },
                        "exclusiveMaximum?": {
                            "type": "integer"
                        },
                        "multipleOf?": {
                            "type": "integer",
                            "exclusiveMinimum": 0
                        },
                        "safeInteger?": {
                            "type": "boolean"
                        },
                        "default?": {
                            "type": "integer",
                            "description": "[JSON Schema]"
                        }
                    }
                },
                "NumberType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "number"
                        },
                        "minimum?": {
                            "type": "number"
                        },
                        "exclusiveMinimum?": {
                            "type": "number"
                        },
                        "maximum?": {
                            "type": "number"
                        },
                        "exclusiveMaximum?": {
                            "type": "number"
                        },
                        "multipleOf?": {
                            "type": "number",
                            "exclusiveMinimum": 0
                        },
                        "safeNumber?": {
                            "type": "boolean"
                        },
                        "default?": {
                            "type": "number",
                            "description": "[JSON Schema]"
                        }
                    }
                },
                "BasicStringType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "string"
                        },
                        "minLength?": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "maxLength?": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "default?": {
                            "type": "string",
                            "description": "[JSON Schema]"
                        }
                    }
                },
                "PatternStringType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "BasicStringType"
                        }
                    ],
                    "members": {
                        "pattern": {
                            "type": "string"
                        },
                        "tsPattern?": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            },
                            "minItems": 1,
                            "description": "[TypeScript] You can define Template Literal Types. Arrays are OR-combined. You need to match the regular expression in `pattern` and Template Literal Types."
                        },
                        "regexpFlags?": {
                            "type": "string",
                            "description": "[TypeScript]"
                        },
                        "regexpTest?": {
                            "type": "string",
                            "description": "[TypeScript] Custom RegExp Test Function like (pattern: string, flags: string, text: string): boolean => new RegExp(pattern, flags).test(text)"
                        }
                    }
                },
                "FormatStringType": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "BasicStringType"
                        }
                    ],
                    "members": {
                        "format": {
                            "type": "keyof",
                            "value": {
                                "type": "typeof",
                                "value": {
                                    "$ref": "StringFormatMap"
                                }
                            }
                        },
                        "regexpFlags?": {
                            "type": "string"
                        }
                    }
                },
                "StringType": {
                    "type": "type",
                    "define": {
                        "type": "or",
                        "types": [
                            {
                                "$ref": "BasicStringType"
                            },
                            {
                                "$ref": "PatternStringType"
                            },
                            {
                                "$ref": "FormatStringType"
                            }
                        ]
                    }
                },
                "PrimitiveTypeElement": {
                    "type": "type",
                    "define": {
                        "type": "or",
                        "types": [
                            {
                                "$ref": "NeverType"
                            },
                            {
                                "$ref": "AnyType"
                            },
                            {
                                "$ref": "UnknownType"
                            },
                            {
                                "$ref": "NullType"
                            },
                            {
                                "$ref": "BooleanType"
                            },
                            {
                                "$ref": "NumberType"
                            },
                            {
                                "$ref": "IntegerType"
                            },
                            {
                                "$ref": "StringType"
                            }
                        ]
                    }
                },
                "Type": {
                    "type": "type",
                    "define": {
                        "type": "or",
                        "types": [
                            {
                                "$ref": "PrimitiveTypeElement"
                            },
                            {
                                "$ref": "TypeDefinition"
                            },
                            {
                                "$ref": "EnumTypeElement"
                            },
                            {
                                "$ref": "TypeofElement"
                            },
                            {
                                "$ref": "KeyofElement"
                            },
                            {
                                "$ref": "ItemofElement"
                            },
                            {
                                "$ref": "MemberofElement"
                            },
                            {
                                "$ref": "InterfaceDefinition"
                            },
                            {
                                "$ref": "DictionaryDefinition"
                            },
                            {
                                "$ref": "ArrayElement"
                            },
                            {
                                "$ref": "OrElement"
                            },
                            {
                                "$ref": "AndElement"
                            },
                            {
                                "$ref": "LiteralElement"
                            }
                        ]
                    }
                },
                "EnumTypeElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "enum-type"
                        },
                        "members": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "or",
                                "types": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    }
                },
                "TypeofElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "typeof"
                        },
                        "value": {
                            "$ref": "ReferElement"
                        }
                    }
                },
                "KeyofElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "keyof"
                        },
                        "value": {
                            "type": "or",
                            "types": [
                                {
                                    "$ref": "TypeofElement"
                                },
                                {
                                    "$ref": "ReferElement"
                                }
                            ]
                        }
                    }
                },
                "ItemofElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "itemof"
                        },
                        "value": {
                            "$ref": "ReferElement"
                        }
                    }
                },
                "MemberofElement": {
                    "type": "interface",
                    "extends": [
                        {
                            "$ref": "CommonProperties"
                        }
                    ],
                    "members": {
                        "type": {
                            "const": "memberof"
                        },
                        "value": {
                            "$ref": "ReferElement"
                        },
                        "key": {
                            "type": "or",
                            "types": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            ]
                        }
                    }
                },
                "TypeOrRefer": {
                    "type": "type",
                    "define": {
                        "type": "or",
                        "types": [
                            {
                                "$ref": "Type"
                            },
                            {
                                "$ref": "ReferElement"
                            }
                        ]
                    }
                },
                "TypeOrValue": {
                    "type": "type",
                    "define": {
                        "type": "or",
                        "types": [
                            {
                                "$ref": "Type"
                            },
                            {
                                "$ref": "ValueDefinition"
                            }
                        ]
                    }
                },
                "TypeOrValueOfRefer": {
                    "type": "type",
                    "define": {
                        "type": "or",
                        "types": [
                            {
                                "$ref": "TypeOrValue"
                            },
                            {
                                "$ref": "ReferElement"
                            }
                        ]
                    }
                },
                "TypeOrLiteralOfRefer": {
                    "type": "type",
                    "define": {
                        "type": "or",
                        "types": [
                            {
                                "$ref": "TypeOrRefer"
                            },
                            {
                                "$ref": "LiteralElement"
                            }
                        ]
                    }
                },
                "StringFormatMap": {
                    "type": "value",
                    "value": {
                        "const": {
                            "date-time": {
                                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}\\:\\d{2}\\:\\d{2}[+-]\\d{2}\\:\\d{2}$",
                                "tsPattern": [
                                    "${number}-${number}-${number}T${number}:${number}:${number}${ \"+\" | \"-\" }${number}:${number}"
                                ]
                            },
                            "date": {
                                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                                "tsPattern": [
                                    "${number}-${number}-${number}"
                                ]
                            },
                            "time": {
                                "pattern": "^\\d{2}\\:\\d{2}\\:\\d{2}[+-]\\d{2}\\:\\d{2}$",
                                "tsPattern": [
                                    "${number}:${number}:${number}${ \"+\" | \"-\" }${number}:${number}"
                                ]
                            },
                            "duration": {
                                "pattern": "^P(?:\\d+W|(?:\\d+Y(?:\\d+M(?:\\d+D)?)?)|(?:\\d+M(?:\\d+D)?)|\\d+D)?(?:T(?:\\d+H(?:\\d+M(?:\\d+S)?)?)|(?:\\d+M(?:\\d+S)?)|\\d+S)?$",
                                "tsPattern": [
                                    "P${string}T${string}",
                                    "P${string}",
                                    "PT${string}"
                                ]
                            },
                            "email": {
                                "pattern": "^(?:[\\x21-\\x3F]|[\\x41-\\x7E])+@(?:[\\x21-0x3F]|[\\x41-\\x7E])+\\.(?:[\\x21-\\x3F]|[\\x41-\\x7E])+$",
                                "tsPattern": [
                                    "${string}@${string}.${string}"
                                ]
                            },
                            "idn-email": {
                                "pattern": "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$",
                                "tsPattern": [
                                    "${string}@${string}.${string}"
                                ]
                            },
                            "hostname": {
                                "pattern": "^(?:[\\x21-\\x3F]|[\\x41-\\x7E])+$"
                            },
                            "idn-hostname": {
                                "pattern": "^\\S+$"
                            },
                            "ipv4": {
                                "pattern": "^[12]?\\d{1,2}\\.[12]?\\d{1,2}\\.[12]?\\d{1,2}\\.[12]?\\d{1,2}$",
                                "tsPattern": [
                                    "${number}.${number}.${number}.${number}"
                                ]
                            },
                            "ipv6": {
                                "pattern": "^(?=.*\\:.*\\:.*)(?!.*\\:{3}.*)(?!.*\\:{2}.*\\:{2}.*)(?!.*[0-9A-Fa-f]{5,}.*)(?:(?:(?=.*\\:\\:.*)(?:(?:[0-9A-Fa-f]{0,4}\\:){2,7}[0-9A-Fa-f]{0,4}|(?:[0-9A-Fa-f]{0,4}\\:){2,6}[12]?\\d{1,2}\\.[12]?\\d{1,2}\\.[12]?\\d{1,2}\\.[12]?\\d{1,2}))|(?:(?!.*\\:\\:.*)(?:(?:[0-9A-Fa-f]{1,4}\\:){7}[0-9A-Fa-f]{1,4}|(?:[0-9A-Fa-f]{1,4}\\:){6}[12]?\\d{1,2}\\.[12]?\\d{1,2}\\.[12]?\\d{1,2}\\.[12]?\\d{1,2})))$",
                                "tsPattern": [
                                    "${string}:${string}:${string}"
                                ]
                            },
                            "uuid": {
                                "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$",
                                "tsPattern": [
                                    "${string}-${string}-${string}-${string}-${string}"
                                ]
                            },
                            "uri": {
                            },
                            "uri-reference": {
                            },
                            "iri": {
                            },
                            "iri-reference": {
                            },
                            "uri-template": {
                            },
                            "json-pointer": {
                            },
                            "relative-json-pointer": {
                            },
                            "regex": {
                                "pattern": "^[[:regex:]]$"
                            }
                        }
                    },
                    "validator": false
                },
                "StringFormatEntry": {
                    "type": "interface",
                    "members": {
                        "pattern?": {
                            "type": "string",
                            "format": "regex"
                        },
                        "tsPattern?": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            },
                            "minItems": 1,
                            "description": "[TypeScript] You can define Template Literal Types. Arrays are OR-combined. You need to match the regular expression in `pattern` and Template Literal Types."
                        },
                        "regexpFlags?": {
                            "type": "string",
                            "description": "[TypeScript]"
                        },
                        "regexpTest?": {
                            "type": "string",
                            "description": "[TypeScript] Custom RegExp Test Function like (pattern: string, flags: string, text: string): boolean => new RegExp(pattern, flags).test(text)"
                        }
                    },
                    "additionalProperties": false
                }
            }
        }
    },
    "options": {
        "outputFile": "../generated/code/type.ts",
        "indentUnit": 4,
        "indentStyle": "allman",
        "validatorOption": "full",
        "default": {
            "export": true,
            "additionalProperties": false
        },
        "schema": {
            "outputFile": "../generated/schema/type.json",
            "$id": "https://raw.githubusercontent.com/wraith13/evil-type.ts/master/generated/schema/type.json#",
            "$ref": "Type.TypeSchema",
            "externalReferMapping": {
                "Jsonable": "jsonable.json#/definitions/Jsonable"
            }
        }
    }
}